[
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "CharMatcher",
    "paramTags": [],
    "parameters": [],
    "signature": "CharMatcher()",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "any",
    "paramTags": [],
    "parameters": [],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "any()",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "none",
    "paramTags": [],
    "parameters": [],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "none()",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "whitespace",
    "paramTags": [],
    "parameters": [],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "whitespace()",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "breakingWhitespace",
    "paramTags": [],
    "parameters": [],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "breakingWhitespace()",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "ascii",
    "paramTags": [],
    "parameters": [],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "ascii()",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "digit",
    "paramTags": [],
    "parameters": [],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "digit()",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "javaDigit",
    "paramTags": [],
    "parameters": [],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "javaDigit()",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "javaLetter",
    "paramTags": [],
    "parameters": [],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "javaLetter()",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "javaLetterOrDigit",
    "paramTags": [],
    "parameters": [],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "javaLetterOrDigit()",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "javaUpperCase",
    "paramTags": [],
    "parameters": [],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "javaUpperCase()",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "javaLowerCase",
    "paramTags": [],
    "parameters": [],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "javaLowerCase()",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "javaIsoControl",
    "paramTags": [],
    "parameters": [],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "javaIsoControl()",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "invisible",
    "paramTags": [],
    "parameters": [],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "invisible()",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "singleWidth",
    "paramTags": [],
    "parameters": [],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "singleWidth()",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "is",
    "paramTags": [],
    "parameters": [
      {
        "name": "match",
        "type": {
          "isArray": false,
          "name": "char",
          "qualifiedName": "char"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "is(char match)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "isNot",
    "paramTags": [],
    "parameters": [
      {
        "name": "match",
        "type": {
          "isArray": false,
          "name": "char",
          "qualifiedName": "char"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "isNot(char match)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "anyOf",
    "paramTags": [],
    "parameters": [
      {
        "name": "sequence",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "anyOf(java.lang.CharSequence sequence)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "noneOf",
    "paramTags": [],
    "parameters": [
      {
        "name": "sequence",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "noneOf(java.lang.CharSequence sequence)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "inRange",
    "paramTags": [],
    "parameters": [
      {
        "name": "startInclusive",
        "type": {
          "isArray": false,
          "name": "char",
          "qualifiedName": "char"
        }
      },
      {
        "name": "endInclusive",
        "type": {
          "isArray": false,
          "name": "char",
          "qualifiedName": "char"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "inRange(char startInclusive,char endInclusive)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": [
      {
        "codeTags": [
          "endInclusive < startInclusive"
        ],
        "comment": "if endInclusive < startInclusive",
        "condition": "args[1]<args[0]",
        "exception": {
          "isArray": false,
          "name": "IllegalArgumentException",
          "qualifiedName": "java.lang.IllegalArgumentException"
        },
        "kind": "THROWS"
      }
    ]
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "forPredicate",
    "paramTags": [],
    "parameters": [
      {
        "name": "predicate",
        "type": {
          "isArray": false,
          "name": "Predicate",
          "qualifiedName": "com.google.common.base.Predicate"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "forPredicate(com.google.common.base.Predicate predicate)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "matches",
    "paramTags": [],
    "parameters": [
      {
        "name": "c",
        "type": {
          "isArray": false,
          "name": "char",
          "qualifiedName": "char"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "boolean",
      "qualifiedName": "boolean"
    },
    "signature": "matches(char c)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "negate",
    "paramTags": [],
    "parameters": [],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "negate()",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "and",
    "paramTags": [],
    "parameters": [
      {
        "name": "other",
        "type": {
          "isArray": false,
          "name": "CharMatcher",
          "qualifiedName": "com.google.common.base.CharMatcher"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "and(com.google.common.base.CharMatcher other)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "or",
    "paramTags": [],
    "parameters": [
      {
        "name": "other",
        "type": {
          "isArray": false,
          "name": "CharMatcher",
          "qualifiedName": "com.google.common.base.CharMatcher"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "or(com.google.common.base.CharMatcher other)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "precomputed",
    "paramTags": [],
    "parameters": [],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "precomputed()",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "precomputedInternal",
    "paramTags": [],
    "parameters": [],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "precomputedInternal()",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "precomputedPositive",
    "paramTags": [],
    "parameters": [
      {
        "name": "totalCharacters",
        "type": {
          "isArray": false,
          "name": "int",
          "qualifiedName": "int"
        }
      },
      {
        "name": "table",
        "type": {
          "isArray": false,
          "name": "BitSet",
          "qualifiedName": "java.util.BitSet"
        }
      },
      {
        "name": "description",
        "type": {
          "isArray": false,
          "name": "String",
          "qualifiedName": "java.lang.String"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "signature": "precomputedPositive(int totalCharacters,java.util.BitSet table,java.lang.String description)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "isSmall",
    "paramTags": [],
    "parameters": [
      {
        "name": "totalCharacters",
        "type": {
          "isArray": false,
          "name": "int",
          "qualifiedName": "int"
        }
      },
      {
        "name": "tableLength",
        "type": {
          "isArray": false,
          "name": "int",
          "qualifiedName": "int"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "boolean",
      "qualifiedName": "boolean"
    },
    "signature": "isSmall(int totalCharacters,int tableLength)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "setBits",
    "paramTags": [],
    "parameters": [
      {
        "name": "table",
        "type": {
          "isArray": false,
          "name": "BitSet",
          "qualifiedName": "java.util.BitSet"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "void",
      "qualifiedName": "void"
    },
    "signature": "setBits(java.util.BitSet table)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "matchesAnyOf",
    "paramTags": [
      {
        "comment": "the character sequence to examine, possibly empty",
        "condition": "",
        "kind": "PARAM",
        "parameter": {
          "name": "sequence",
          "type": {
            "isArray": false,
            "name": "CharSequence",
            "qualifiedName": "java.lang.CharSequence"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "sequence",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      }
    ],
    "returnTag": {
      "comment": "true if this matcher matches at least one character in the sequence",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "boolean",
      "qualifiedName": "boolean"
    },
    "signature": "matchesAnyOf(java.lang.CharSequence sequence)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "matchesAllOf",
    "paramTags": [
      {
        "comment": "the character sequence to examine, possibly empty",
        "condition": "",
        "kind": "PARAM",
        "parameter": {
          "name": "sequence",
          "type": {
            "isArray": false,
            "name": "CharSequence",
            "qualifiedName": "java.lang.CharSequence"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "sequence",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      }
    ],
    "returnTag": {
      "comment": "true if this matcher matches every character in the sequence, including when the sequence is empty",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "boolean",
      "qualifiedName": "boolean"
    },
    "signature": "matchesAllOf(java.lang.CharSequence sequence)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "matchesNoneOf",
    "paramTags": [
      {
        "comment": "the character sequence to examine, possibly empty",
        "condition": "",
        "kind": "PARAM",
        "parameter": {
          "name": "sequence",
          "type": {
            "isArray": false,
            "name": "CharSequence",
            "qualifiedName": "java.lang.CharSequence"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "sequence",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      }
    ],
    "returnTag": {
      "comment": "true if this matcher matches every character in the sequence, including when the sequence is empty",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "boolean",
      "qualifiedName": "boolean"
    },
    "signature": "matchesNoneOf(java.lang.CharSequence sequence)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "indexIn",
    "paramTags": [
      {
        "comment": "the character sequence to examine from the beginning",
        "condition": "",
        "kind": "PARAM",
        "parameter": {
          "name": "sequence",
          "type": {
            "isArray": false,
            "name": "CharSequence",
            "qualifiedName": "java.lang.CharSequence"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "sequence",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      }
    ],
    "returnTag": {
      "comment": "an index, or -1 if no character matches",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "int",
      "qualifiedName": "int"
    },
    "signature": "indexIn(java.lang.CharSequence sequence)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "indexIn",
    "paramTags": [
      {
        "comment": "the character sequence to examine",
        "condition": "",
        "kind": "PARAM",
        "parameter": {
          "name": "sequence",
          "type": {
            "isArray": false,
            "name": "CharSequence",
            "qualifiedName": "java.lang.CharSequence"
          }
        }
      },
      {
        "comment": "the first index to examine; must be nonnegative and no greater than sequence.length()",
        "condition": "(args[0]<0) == false && (args[0]>args[1].length()) == false",
        "kind": "PARAM",
        "parameter": {
          "name": "start",
          "type": {
            "isArray": false,
            "name": "int",
            "qualifiedName": "int"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "sequence",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      },
      {
        "name": "start",
        "type": {
          "isArray": false,
          "name": "int",
          "qualifiedName": "int"
        }
      }
    ],
    "returnTag": {
      "comment": "the index of the first matching character, guaranteed to be no less than start, or -1 if no character matches",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "int",
      "qualifiedName": "int"
    },
    "signature": "indexIn(java.lang.CharSequence sequence,int start)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": [
      {
        "codeTags": [
          "sequence.length()"
        ],
        "comment": "if start is negative or greater than sequence.length()",
        "condition": "args[1]<0 || args[1]>args[0].length()",
        "exception": {
          "isArray": false,
          "name": "IndexOutOfBoundsException",
          "qualifiedName": "java.lang.IndexOutOfBoundsException"
        },
        "kind": "THROWS"
      }
    ]
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "lastIndexIn",
    "paramTags": [
      {
        "comment": "the character sequence to examine from the end",
        "condition": "",
        "kind": "PARAM",
        "parameter": {
          "name": "sequence",
          "type": {
            "isArray": false,
            "name": "CharSequence",
            "qualifiedName": "java.lang.CharSequence"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "sequence",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      }
    ],
    "returnTag": {
      "comment": "an index, or -1 if no character matches",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "int",
      "qualifiedName": "int"
    },
    "signature": "lastIndexIn(java.lang.CharSequence sequence)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "countIn",
    "paramTags": [],
    "parameters": [
      {
        "name": "sequence",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "int",
      "qualifiedName": "int"
    },
    "signature": "countIn(java.lang.CharSequence sequence)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "removeFrom",
    "paramTags": [],
    "parameters": [
      {
        "name": "sequence",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "removeFrom(java.lang.CharSequence sequence)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "retainFrom",
    "paramTags": [],
    "parameters": [
      {
        "name": "sequence",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "retainFrom(java.lang.CharSequence sequence)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "replaceFrom",
    "paramTags": [
      {
        "comment": "the character sequence to replace matching characters in",
        "condition": "",
        "kind": "PARAM",
        "parameter": {
          "name": "sequence",
          "type": {
            "isArray": false,
            "name": "CharSequence",
            "qualifiedName": "java.lang.CharSequence"
          }
        }
      },
      {
        "comment": "the character to append to the result string in place of each matching character in sequence",
        "condition": "",
        "kind": "PARAM",
        "parameter": {
          "name": "replacement",
          "type": {
            "isArray": false,
            "name": "char",
            "qualifiedName": "char"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "sequence",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      },
      {
        "name": "replacement",
        "type": {
          "isArray": false,
          "name": "char",
          "qualifiedName": "char"
        }
      }
    ],
    "returnTag": {
      "comment": "the new string",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "replaceFrom(java.lang.CharSequence sequence,char replacement)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "replaceFrom",
    "paramTags": [
      {
        "comment": "the character sequence to replace matching characters in",
        "condition": "",
        "kind": "PARAM",
        "parameter": {
          "name": "sequence",
          "type": {
            "isArray": false,
            "name": "CharSequence",
            "qualifiedName": "java.lang.CharSequence"
          }
        }
      },
      {
        "comment": "the characters to append to the result string in place of each matching character in sequence",
        "condition": "",
        "kind": "PARAM",
        "parameter": {
          "name": "replacement",
          "type": {
            "isArray": false,
            "name": "CharSequence",
            "qualifiedName": "java.lang.CharSequence"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "sequence",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      },
      {
        "name": "replacement",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      }
    ],
    "returnTag": {
      "comment": "the new string",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "replaceFrom(java.lang.CharSequence sequence,java.lang.CharSequence replacement)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "trimFrom",
    "paramTags": [],
    "parameters": [
      {
        "name": "sequence",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "trimFrom(java.lang.CharSequence sequence)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "trimLeadingFrom",
    "paramTags": [],
    "parameters": [
      {
        "name": "sequence",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "trimLeadingFrom(java.lang.CharSequence sequence)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "trimTrailingFrom",
    "paramTags": [],
    "parameters": [
      {
        "name": "sequence",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "trimTrailingFrom(java.lang.CharSequence sequence)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "collapseFrom",
    "paramTags": [
      {
        "comment": "the character sequence to replace matching groups of characters in",
        "condition": "",
        "kind": "PARAM",
        "parameter": {
          "name": "sequence",
          "type": {
            "isArray": false,
            "name": "CharSequence",
            "qualifiedName": "java.lang.CharSequence"
          }
        }
      },
      {
        "comment": "the character to append to the result string in place of each group of matching characters in sequence",
        "condition": "",
        "kind": "PARAM",
        "parameter": {
          "name": "replacement",
          "type": {
            "isArray": false,
            "name": "char",
            "qualifiedName": "char"
          }
        }
      }
    ],
    "parameters": [
      {
        "name": "sequence",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      },
      {
        "name": "replacement",
        "type": {
          "isArray": false,
          "name": "char",
          "qualifiedName": "char"
        }
      }
    ],
    "returnTag": {
      "comment": "the new string",
      "condition": "",
      "kind": "RETURN"
    },
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "collapseFrom(java.lang.CharSequence sequence,char replacement)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "trimAndCollapseFrom",
    "paramTags": [],
    "parameters": [
      {
        "name": "sequence",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      },
      {
        "name": "replacement",
        "type": {
          "isArray": false,
          "name": "char",
          "qualifiedName": "char"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "trimAndCollapseFrom(java.lang.CharSequence sequence,char replacement)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "finishCollapseFrom",
    "paramTags": [],
    "parameters": [
      {
        "name": "sequence",
        "type": {
          "isArray": false,
          "name": "CharSequence",
          "qualifiedName": "java.lang.CharSequence"
        }
      },
      {
        "name": "start",
        "type": {
          "isArray": false,
          "name": "int",
          "qualifiedName": "int"
        }
      },
      {
        "name": "end",
        "type": {
          "isArray": false,
          "name": "int",
          "qualifiedName": "int"
        }
      },
      {
        "name": "replacement",
        "type": {
          "isArray": false,
          "name": "char",
          "qualifiedName": "char"
        }
      },
      {
        "name": "builder",
        "type": {
          "isArray": false,
          "name": "StringBuilder",
          "qualifiedName": "java.lang.StringBuilder"
        }
      },
      {
        "name": "inMatchingGroup",
        "type": {
          "isArray": false,
          "name": "boolean",
          "qualifiedName": "boolean"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "finishCollapseFrom(java.lang.CharSequence sequence,int start,int end,char replacement,java.lang.StringBuilder builder,boolean inMatchingGroup)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "apply",
    "paramTags": [],
    "parameters": [
      {
        "name": "character",
        "type": {
          "isArray": false,
          "name": "Character",
          "qualifiedName": "java.lang.Character"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "boolean",
      "qualifiedName": "boolean"
    },
    "signature": "apply(java.lang.Character character)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": [
      {
        "codeTags": [
          "input"
        ],
        "comment": "if input is null and this predicate does not accept null arguments",
        "condition": "",
        "exception": {
          "isArray": false,
          "name": "NullPointerException",
          "qualifiedName": "java.lang.NullPointerException"
        },
        "kind": "THROWS"
      }
    ]
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "toString",
    "paramTags": [],
    "parameters": [],
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "toString()",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "showCharacter",
    "paramTags": [],
    "parameters": [
      {
        "name": "c",
        "type": {
          "isArray": false,
          "name": "char",
          "qualifiedName": "char"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "String",
      "qualifiedName": "java.lang.String"
    },
    "signature": "showCharacter(char c)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  },
  {
    "containingClass": {
      "isArray": false,
      "name": "CharMatcher",
      "qualifiedName": "com.google.common.base.CharMatcher"
    },
    "isVarArgs": false,
    "name": "isEither",
    "paramTags": [],
    "parameters": [
      {
        "name": "c1",
        "type": {
          "isArray": false,
          "name": "char",
          "qualifiedName": "char"
        }
      },
      {
        "name": "c2",
        "type": {
          "isArray": false,
          "name": "char",
          "qualifiedName": "char"
        }
      }
    ],
    "returnType": {
      "isArray": false,
      "name": "IsEither",
      "qualifiedName": "com.google.common.base.CharMatcher.IsEither"
    },
    "signature": "isEither(char c1,char c2)",
    "targetClass": "com.google.common.base.CharMatcher",
    "throwsTags": []
  }
]