plugins {
  id 'application'
  id 'eclipse'
  id 'jacoco'
  id 'com.github.johnrengelman.shadow' version '1.2.3' // For creating the fat jar
  id 'de.undercouch.download' version '3.1.1' // For the download tasks
  id 'com.github.sherter.google-java-format' version '0.3.2'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
mainClassName = "org.toradocu.Toradocu"
version = '1.0-devel'
jar {
  manifest {
    attributes 'Implementation-Title': 'Toradocu', 'Implementation-Version': version
  }
}

//compileJava {
//  options.compilerArgs << '-Xlint:unchecked'
//}

sourceSets {
  test {
    java {
      exclude 'org/toradocu/translator/**'
      exclude 'org/toradocu/generator/**'
      exclude 'org/toradocu/PrecisionRecallTestSuite.java'
      exclude 'org/toradocu/PrecisionRecallCommonsCollections4.java'
      exclude 'org/toradocu/PrecisionRecallJGraphT.java'
    }
  }
}

repositories {
  mavenCentral()
}

dependencies {
  compile fileTree(dir: 'lib', include: '*.jar')
  compile 'edu.stanford.nlp:stanford-corenlp:3.6.0'
  compile 'edu.stanford.nlp:stanford-corenlp:3.6.0:models-english'
  compile 'org.jsoup:jsoup:1.8.3' // JSoup used only to remove HTML tags in comments.
  compile 'com.github.javaparser:javaparser-core:2.3.0'
  compile 'com.beust:jcommander:1.48'
  compile 'com.google.code.gson:gson:2.7'
  compile 'commons-io:commons-io:2.5'
  compile 'org.slf4j:slf4j-simple:1.7.21'
  testCompile 'junit:junit:4.12'
  testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'
}

task wrapper(type: Wrapper) {
  gradleVersion = '3.0'
}

task copyDocletResources1(type: Copy) {
  from 'src/main/java/org/toradocu/doclet/internal/toolkit/resources'
  into 'build/classes/main/org/toradocu/doclet/internal/toolkit/resources'
}

task copyDocletResources2(type: Copy) {
  from 'src/main/java/org/toradocu/doclet/formats/html/resources'
  into 'build/classes/main/org/toradocu/doclet/formats/html/resources'
}

compileJava.doLast {
  tasks.copyDocletResources1.execute()
  tasks.copyDocletResources2.execute()
}

tasks.googleJavaFormat {
  exclude 'src/main/java/org/toradocu/doclet/**/*.java'
  exclude 'src/test/resources/**'
}

tasks.verifyGoogleJavaFormat {
  exclude 'src/main/java/org/toradocu/doclet/**/*.java'
  exclude 'src/test/resources/**'
}

import de.undercouch.gradle.tasks.download.Download

/* Downloads binaries of the systems used to measure Toradocu's precision and recall. Task not used at the moment:
 * We include binaries until Toradocu needs to load parameters name from the binaries. */
task downloadBinaries(type: Download) {
  src ([
    'http://mirror.switch.ch/mirror/apache/dist/commons/collections/binaries/commons-collections4-4.1-bin.zip',
    'https://repo1.maven.org/maven2/com/google/guava/guava/19.0/guava-19.0.jar',
    'https://repo1.maven.org/maven2/org/jgrapht/jgrapht-core/0.9.2/jgrapht-core-0.9.2.jar'
  ])
  dest 'src/test/resources/bin'
  onlyIfNewer true
  overwrite false
}

/* Downloads sources of the systems used to measure Toradocu's precision and recall */
task downloadSources(type: Download) {
  src ([
    'http://mirror.switch.ch/mirror/apache/dist/commons/collections/source/commons-collections4-4.1-src.zip',
    'https://repo1.maven.org/maven2/com/google/guava/guava/19.0/guava-19.0-sources.jar',
    'https://repo1.maven.org/maven2/org/jgrapht/jgrapht-core/0.9.2/jgrapht-core-0.9.2-sources.jar'
  ])
  dest 'src/test/resources/src'
  onlyIfNewer true
  overwrite false
}

/* Extracts source archives of the systems used to measure Toradocu's precision and recall */
task extractSources(dependsOn: downloadSources) << {
  file('src/test/resources/src').listFiles().findAll{it.name.endsWith('.zip')||it.name.endsWith('.jar')}.each{ file ->
    def fileName = "$file.name"
    def index = fileName.lastIndexOf('.')
    def fileBaseName = fileName.substring(0, index)
    copy {
      from zipTree(file)
      into 'src/test/resources/src/' + fileBaseName
    }
  }
}

test.dependsOn extractSources

task removeTestOutputDirs(type: Delete) {
  delete 'tmp', 'aspects'
}

clean.dependsOn removeTestOutputDirs

/* Make Emacs TAGS table */
task tags(type: Exec) {
  description "Run etags to create an Emacs TAGS table"
  environment PATH: "$System.env.PATH:$buildDir/utils/plume-lib/bin"
  commandLine "bash", "-c", "find src/ -name *.java | sort-directory-order | xargs etags"
}

/* Install the git pre-commit hook */
task installhook(type:Exec) {
  commandLine 'sh', '-c' , 'ln -s ../../git-pre-commit-hook.sh .git/hooks/pre-commit'
  ignoreExitValue true
}

gradle.taskGraph.beforeTask { Task task ->
  installhook.execute()
}
