[
  {
    "signature": "getVisibleItemCount()",
    "name": "getVisibleItemCount",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "com.google.gwt.user.cellview.client.AbstractHasData(com.google.gwt.dom.client.Element elem, int pageSize, com.google.gwt.view.client.ProvidesKey<T> keyProvider)",
    "name": "com.google.gwt.user.cellview.client.AbstractHasData",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.dom.client.Element",
          "name": "Element",
          "isArray": false
        },
        "name": "elem"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "pageSize"
      },
      {
        "type": {
          "qualifiedName": "com.google.gwt.view.client.ProvidesKey",
          "name": "ProvidesKey",
          "isArray": false
        },
        "name": "keyProvider"
      }
    ],
    "equivalence": {
      "comment": "Constructs an AbstractHasData with the given page size.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "redraw()",
    "name": "redraw",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Redraw the widget using the existing data.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getVisibleRange()",
    "name": "getVisibleRange",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.view.client.Range",
      "name": "com.google.gwt.view.client.Range",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getPageSize()",
    "name": "getPageSize",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Return the range size.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setSelected(com.google.gwt.dom.client.Element elem, boolean selected)",
    "name": "setSelected",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.dom.client.Element",
          "name": "Element",
          "isArray": false
        },
        "name": "elem"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "selected"
      }
    ],
    "equivalence": {
      "comment": "Update an element to reflect its selected state.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "redrawRow(int absRowIndex)",
    "name": "redrawRow",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "absRowIndex"
      }
    ],
    "equivalence": {
      "comment": "Redraw a single row using the existing data.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setRowData(int start, java.util.List<? extends T> values)",
    "name": "setRowData",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "start"
      },
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "values"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "renderRowValues(com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.util.List<T> values, int start, com.google.gwt.view.client.SelectionModel<? super T> selectionModel)",
    "name": "renderRowValues",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.safehtml.shared.SafeHtmlBuilder",
          "name": "SafeHtmlBuilder",
          "isArray": false
        },
        "name": "sb"
      },
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "start"
      },
      {
        "type": {
          "qualifiedName": "com.google.gwt.view.client.SelectionModel",
          "name": "SelectionModel",
          "isArray": false
        },
        "name": "selectionModel"
      }
    ],
    "equivalence": {
      "comment": "Render all row values into the specified SafeHtmlBuilder.  Subclasses can optionally throw an UnsupportedOperationException if they prefer to render the rows in #replaceAllChildren(List, SafeHtml) and #replaceChildren(List, int, SafeHtml). In this case, the SafeHtml argument will be null. Though a bit hacky, this is designed to supported legacy widgets that use SafeHtmlBuilder, and newer widgets that use other builders, such as the ElementBuilder API.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "doAttach(com.google.gwt.user.client.ui.Widget child)",
    "name": "doAttach",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.user.client.ui.Widget",
          "name": "Widget",
          "isArray": false
        },
        "name": "child"
      }
    ],
    "equivalence": {
      "comment": "Attach a child.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "com.google.gwt.user.cellview.client.AbstractHasData(com.google.gwt.user.client.ui.Widget widget, int pageSize, com.google.gwt.view.client.ProvidesKey<T> keyProvider)",
    "name": "com.google.gwt.user.cellview.client.AbstractHasData",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.user.client.ui.Widget",
          "name": "Widget",
          "isArray": false
        },
        "name": "widget"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "pageSize"
      },
      {
        "type": {
          "qualifiedName": "com.google.gwt.view.client.ProvidesKey",
          "name": "ProvidesKey",
          "isArray": false
        },
        "name": "keyProvider"
      }
    ],
    "equivalence": {
      "comment": "Constructs an AbstractHasData with the given page size.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "adopt(com.google.gwt.user.client.ui.Widget child)",
    "name": "adopt",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.user.client.ui.Widget",
          "name": "Widget",
          "isArray": false
        },
        "name": "child"
      }
    ],
    "equivalence": {
      "comment": "Adopt the specified widget.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addLoadingStateChangeHandler(com.google.gwt.user.cellview.client.LoadingStateChangeEvent$Handler handler)",
    "name": "addLoadingStateChangeHandler",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.event.shared.HandlerRegistration",
      "name": "com.google.gwt.event.shared.HandlerRegistration",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.user.cellview.client.LoadingStateChangeEvent$Handler",
          "name": "Handler",
          "isArray": false
        },
        "name": "handler"
      }
    ],
    "equivalence": {
      "comment": "Add a LoadingStateChangeEvent.Handler to be notified of changes in the loading state.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getValueKey(T value)",
    "name": "getValueKey",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "comment": "Get the key for the specified value. If a keyProvider is not specified or the value is null, the value is returned. If the key provider is specified, it is used to get the key from the value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setFocusable(com.google.gwt.dom.client.Element elem, boolean focusable)",
    "name": "setFocusable",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.dom.client.Element",
          "name": "Element",
          "isArray": false
        },
        "name": "elem"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "focusable"
      }
    ],
    "equivalence": {
      "comment": "Make an element focusable or not.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replaceChildren(com.google.gwt.user.client.ui.Widget widget, com.google.gwt.dom.client.Element childContainer, com.google.gwt.dom.client.Element newChildren, int start, com.google.gwt.safehtml.shared.SafeHtml html)",
    "name": "replaceChildren",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.user.client.ui.Widget",
          "name": "Widget",
          "isArray": false
        },
        "name": "widget"
      },
      {
        "type": {
          "qualifiedName": "com.google.gwt.dom.client.Element",
          "name": "Element",
          "isArray": false
        },
        "name": "childContainer"
      },
      {
        "type": {
          "qualifiedName": "com.google.gwt.dom.client.Element",
          "name": "Element",
          "isArray": false
        },
        "name": "newChildren"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "start"
      },
      {
        "type": {
          "qualifiedName": "com.google.gwt.safehtml.shared.SafeHtml",
          "name": "SafeHtml",
          "isArray": false
        },
        "name": "html"
      }
    ],
    "equivalence": {
      "comment": "Convenience method to convert the specified HTML into DOM elements and replace the existing elements starting at the specified index. If the number of children specified exceeds the existing number of children, the remaining children should be appended.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setAccessKey(char key)",
    "name": "setAccessKey",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "equivalence": {
      "comment": "{@inheritDoc} @see #getAccessKey()",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setKeyboardSelectedRow(int row, boolean stealFocus)",
    "name": "setKeyboardSelectedRow",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "row"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "stealFocus"
      }
    ],
    "equivalence": {
      "comment": "Set the keyboard selected row and optionally focus on the new row.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setVisibleRange(com.google.gwt.view.client.Range range)",
    "name": "setVisibleRange",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.view.client.Range",
          "name": "Range",
          "isArray": false
        },
        "name": "range"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getPresenter()",
    "name": "getPresenter",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.user.cellview.client.HasDataPresenter<T>",
      "name": "com.google.gwt.user.cellview.client.HasDataPresenter<T>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getVisibleItem(int indexOnPage)",
    "name": "getVisibleItem",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "indexOnPage"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setKeyboardSelectedRow(int row)",
    "name": "setKeyboardSelectedRow",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "row"
      }
    ],
    "equivalence": {
      "comment": "Set the keyboard selected row. The row index is the index relative to the current page start index.  If keyboard selection is disabled, this method does nothing.   If the keyboard selected row is outside of the range of the current page (that is, less than 0 or greater than or equal to the page size), the page or range will be adjusted depending on the keyboard paging policy. If the keyboard paging policy is limited to the current range, the row index will be clipped to the current page.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setPageStart(int pageStart)",
    "name": "setPageStart",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "pageStart"
      }
    ],
    "equivalence": {
      "comment": "Set the starting index of the current visible page. The actual page start will be clamped in the range [0, getSize() - 1].",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replaceAllChildren(com.google.gwt.user.client.ui.Widget widget, com.google.gwt.dom.client.Element childContainer, com.google.gwt.safehtml.shared.SafeHtml html)",
    "name": "replaceAllChildren",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.user.client.ui.Widget",
          "name": "Widget",
          "isArray": false
        },
        "name": "widget"
      },
      {
        "type": {
          "qualifiedName": "com.google.gwt.dom.client.Element",
          "name": "Element",
          "isArray": false
        },
        "name": "childContainer"
      },
      {
        "type": {
          "qualifiedName": "com.google.gwt.safehtml.shared.SafeHtml",
          "name": "SafeHtml",
          "isArray": false
        },
        "name": "html"
      }
    ],
    "equivalence": {
      "comment": "Convenience method to replace all children of a Widget.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setTabIndex(int index)",
    "name": "setTabIndex",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isRowCountExact()",
    "name": "isRowCountExact",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "onUnload()",
    "name": "onUnload",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setVisibleRangeAndClearData(com.google.gwt.view.client.Range range, boolean forceRangeChangeEvent)",
    "name": "setVisibleRangeAndClearData",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.view.client.Range",
          "name": "Range",
          "isArray": false
        },
        "name": "range"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "forceRangeChangeEvent"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "onFocus()",
    "name": "onFocus",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Called when the widget is focused.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addValueChangeHandler(com.google.gwt.event.logical.shared.ValueChangeHandler<java.util.List<T>> handler)",
    "name": "addValueChangeHandler",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.event.shared.HandlerRegistration",
      "name": "com.google.gwt.event.shared.HandlerRegistration",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.event.logical.shared.ValueChangeHandler",
          "name": "ValueChangeHandler",
          "isArray": false
        },
        "name": "handler"
      }
    ],
    "equivalence": {
      "comment": "Add a ValueChangeHandler that is called when the display values change. Used by CellBrowser to detect when the displayed data changes.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "resetFocusOnCell()",
    "name": "resetFocusOnCell",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Reset focus on the currently focused cell.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getKeyboardPagingPolicy()",
    "name": "getKeyboardPagingPolicy",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.user.cellview.client.HasKeyboardPagingPolicy$KeyboardPagingPolicy",
      "name": "com.google.gwt.user.cellview.client.HasKeyboardPagingPolicy$KeyboardPagingPolicy",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "dependsOnSelection()",
    "name": "dependsOnSelection",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Check whether or not the cells in the view depend on the selection state.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getKeyboardSelectedElement()",
    "name": "getKeyboardSelectedElement",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.dom.client.Element",
      "name": "com.google.gwt.dom.client.Element",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Get the element that has keyboard selection.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getAccessKey()",
    "name": "getAccessKey",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "char",
      "name": "char",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Get the access key.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getChildContainer()",
    "name": "getChildContainer",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.dom.client.Element",
      "name": "com.google.gwt.dom.client.Element",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Return the element that holds the rendered cells.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addRowCountChangeHandler(com.google.gwt.view.client.RowCountChangeEvent$Handler handler)",
    "name": "addRowCountChangeHandler",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.event.shared.HandlerRegistration",
      "name": "com.google.gwt.event.shared.HandlerRegistration",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.view.client.RowCountChangeEvent$Handler",
          "name": "Handler",
          "isArray": false
        },
        "name": "handler"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setKeyboardSelectionHandler(com.google.gwt.view.client.CellPreviewEvent$Handler<T> keyboardSelectionReg)",
    "name": "setKeyboardSelectionHandler",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.view.client.CellPreviewEvent$Handler",
          "name": "Handler",
          "isArray": false
        },
        "name": "keyboardSelectionReg"
      }
    ],
    "equivalence": {
      "comment": "Set the handler that handles keyboard selection/navigation.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setKeyboardPagingPolicy(com.google.gwt.user.cellview.client.HasKeyboardPagingPolicy$KeyboardPagingPolicy policy)",
    "name": "setKeyboardPagingPolicy",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.user.cellview.client.HasKeyboardPagingPolicy$KeyboardPagingPolicy",
          "name": "KeyboardPagingPolicy",
          "isArray": false
        },
        "name": "policy"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setSelectionModel(com.google.gwt.view.client.SelectionModel<? super T> selectionModel)",
    "name": "setSelectionModel",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.view.client.SelectionModel",
          "name": "SelectionModel",
          "isArray": false
        },
        "name": "selectionModel"
      }
    ],
    "equivalence": {
      "comment": "Set the SelectionModel used by this HasData.  By default, selection occurs when the user clicks on a Cell or presses the spacebar. If you need finer control over selection, you can specify a DefaultSelectionEventManager using #setSelectionModel(SelectionModel, com.google.gwt.view.client.CellPreviewEvent.Handler). DefaultSelectionEventManager provides some default implementations to handle checkbox based selection, as well as a blacklist or whitelist of columns to prevent or allow selection.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "onLoadingStateChanged(com.google.gwt.user.cellview.client.LoadingStateChangeEvent$LoadingState state)",
    "name": "onLoadingStateChanged",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.user.cellview.client.LoadingStateChangeEvent$LoadingState",
          "name": "LoadingState",
          "isArray": false
        },
        "name": "state"
      }
    ],
    "equivalence": {
      "comment": "Called when the loading state changes. By default, this implementation fires a LoadingStateChangeEvent.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getChildElement(int index)",
    "name": "getChildElement",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.dom.client.Element",
      "name": "com.google.gwt.dom.client.Element",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "equivalence": {
      "comment": "Get the element that represents the specified index.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "convertToElements(com.google.gwt.safehtml.shared.SafeHtml html)",
    "name": "convertToElements",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.dom.client.Element",
      "name": "com.google.gwt.dom.client.Element",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.safehtml.shared.SafeHtml",
          "name": "SafeHtml",
          "isArray": false
        },
        "name": "html"
      }
    ],
    "equivalence": {
      "comment": "Convert the specified HTML into DOM elements and return the parent of the DOM elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isKeyboardNavigationSuppressed()",
    "name": "isKeyboardNavigationSuppressed",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Check if keyboard navigation is being suppressed, such as when the user is editing a cell.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDisplayedItems()",
    "name": "getDisplayedItems",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<T>",
      "name": "java.util.List<T>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Return the row values that the widget is currently displaying as an immutable list.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setKeyboardSelectionPolicy(com.google.gwt.user.cellview.client.HasKeyboardSelectionPolicy$KeyboardSelectionPolicy policy)",
    "name": "setKeyboardSelectionPolicy",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.user.cellview.client.HasKeyboardSelectionPolicy$KeyboardSelectionPolicy",
          "name": "KeyboardSelectionPolicy",
          "isArray": false
        },
        "name": "policy"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "cellConsumesEventType(com.google.gwt.cell.client.Cell<?> cell, java.lang.String eventType)",
    "name": "cellConsumesEventType",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.cell.client.Cell",
          "name": "Cell",
          "isArray": false
        },
        "name": "cell"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "eventType"
      }
    ],
    "equivalence": {
      "comment": "Check if a cell consumes the specified event type.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "convertToElements(com.google.gwt.user.client.ui.Widget widget, com.google.gwt.user.client.Element tmpElem, com.google.gwt.safehtml.shared.SafeHtml html)",
    "name": "convertToElements",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.dom.client.Element",
      "name": "com.google.gwt.dom.client.Element",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.user.client.ui.Widget",
          "name": "Widget",
          "isArray": false
        },
        "name": "widget"
      },
      {
        "type": {
          "qualifiedName": "com.google.gwt.user.client.Element",
          "name": "Element",
          "isArray": false
        },
        "name": "tmpElem"
      },
      {
        "type": {
          "qualifiedName": "com.google.gwt.safehtml.shared.SafeHtml",
          "name": "SafeHtml",
          "isArray": false
        },
        "name": "html"
      }
    ],
    "equivalence": {
      "comment": "Convenience method to convert the specified HTML into DOM elements and return the parent of the DOM elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setRowCount(int size, boolean isExact)",
    "name": "setRowCount",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "size"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "isExact"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addRangeChangeHandler(com.google.gwt.view.client.RangeChangeEvent$Handler handler)",
    "name": "addRangeChangeHandler",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.event.shared.HandlerRegistration",
      "name": "com.google.gwt.event.shared.HandlerRegistration",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.view.client.RangeChangeEvent$Handler",
          "name": "Handler",
          "isArray": false
        },
        "name": "handler"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRowContainer()",
    "name": "getRowContainer",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.dom.client.Element",
      "name": "com.google.gwt.dom.client.Element",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Return the outer element that contains all of the rendered row values. This method delegates to #getChildContainer();",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getKeyboardSelectedRow()",
    "name": "getKeyboardSelectedRow",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Get the index of the row that is currently selected via the keyboard, relative to the page start index.  This is not same as the selected row in the SelectionModel. The keyboard selected row refers to the row that the user navigated to via the keyboard or mouse.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "onBlur()",
    "name": "onBlur",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Called when the widget is blurred.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "doDetach(com.google.gwt.user.client.ui.Widget child)",
    "name": "doDetach",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.user.client.ui.Widget",
          "name": "Widget",
          "isArray": false
        },
        "name": "child"
      }
    ],
    "equivalence": {
      "comment": "Detach a child.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getKeyboardSelectionPolicy()",
    "name": "getKeyboardSelectionPolicy",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.user.cellview.client.HasKeyboardSelectionPolicy$KeyboardSelectionPolicy",
      "name": "com.google.gwt.user.cellview.client.HasKeyboardSelectionPolicy$KeyboardSelectionPolicy",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setVisibleRange(int start, int length)",
    "name": "setVisibleRange",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "start"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDisplayedItem(int indexOnPage)",
    "name": "getDisplayedItem",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "indexOnPage"
      }
    ],
    "equivalence": {
      "comment": "Get the row value at the specified visible index. Index 0 corresponds to the first item on the page.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setSelectionModel(com.google.gwt.view.client.SelectionModel<? super T> selectionModel, com.google.gwt.view.client.CellPreviewEvent$Handler<T> selectionEventManager)",
    "name": "setSelectionModel",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.view.client.SelectionModel",
          "name": "SelectionModel",
          "isArray": false
        },
        "name": "selectionModel"
      },
      {
        "type": {
          "qualifiedName": "com.google.gwt.view.client.CellPreviewEvent$Handler",
          "name": "Handler",
          "isArray": false
        },
        "name": "selectionEventManager"
      }
    ],
    "equivalence": {
      "comment": "Set the SelectionModel that defines which items are selected and the com.google.gwt.view.client.CellPreviewEvent.Handler that controls how user selection is handled.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setRowData(java.util.List<? extends T> values)",
    "name": "setRowData",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "values"
      }
    ],
    "equivalence": {
      "comment": "Set the complete list of values to display on one page.   Equivalent to calling #setRowCount(int) with the length of the list of values, #setVisibleRange(Range) from 0 to the size of the list of values, and #setRowData(int, List) with a start of 0 and the specified list of values.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setKeyboardSelected(int index, boolean selected, boolean stealFocus)",
    "name": "setKeyboardSelected",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "selected"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "stealFocus"
      }
    ],
    "equivalence": {
      "comment": "Update an element to reflect its keyboard selected state.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRowCount()",
    "name": "getRowCount",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setRowCount(int count)",
    "name": "setRowCount",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "count"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replaceAllChildren(java.util.List<T> values, com.google.gwt.safehtml.shared.SafeHtml html)",
    "name": "replaceAllChildren",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "com.google.gwt.safehtml.shared.SafeHtml",
          "name": "SafeHtml",
          "isArray": false
        },
        "name": "html"
      }
    ],
    "equivalence": {
      "comment": "Replace all children with the specified html.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replaceChildren(java.util.List<T> values, int start, com.google.gwt.safehtml.shared.SafeHtml html)",
    "name": "replaceChildren",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "values"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "start"
      },
      {
        "type": {
          "qualifiedName": "com.google.gwt.safehtml.shared.SafeHtml",
          "name": "SafeHtml",
          "isArray": false
        },
        "name": "html"
      }
    ],
    "equivalence": {
      "comment": "Convert the specified HTML into DOM elements and replace the existing elements starting at the specified index. If the number of children specified exceeds the existing number of children, the remaining children should be appended.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "onBrowserEvent(com.google.gwt.user.client.Event event)",
    "name": "onBrowserEvent",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.user.client.Event",
          "name": "Event",
          "isArray": false
        },
        "name": "event"
      }
    ],
    "equivalence": {
      "comment": "Handle browser events. Subclasses should override #onBrowserEvent2(Event) if they want to extend browser event handling. @see #onBrowserEvent2(Event)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addCellPreviewHandler(com.google.gwt.view.client.CellPreviewEvent$Handler<T> handler)",
    "name": "addCellPreviewHandler",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.event.shared.HandlerRegistration",
      "name": "com.google.gwt.event.shared.HandlerRegistration",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.view.client.CellPreviewEvent$Handler",
          "name": "Handler",
          "isArray": false
        },
        "name": "handler"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSelectionModel()",
    "name": "getSelectionModel",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.view.client.SelectionModel<? super T>",
      "name": "com.google.gwt.view.client.SelectionModel<? super T>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getVisibleItems()",
    "name": "getVisibleItems",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<T>",
      "name": "java.util.List<T>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Return the row values that the widget is currently displaying as an immutable list.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isRowWithinBounds(int row)",
    "name": "isRowWithinBounds",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "row"
      }
    ],
    "equivalence": {
      "comment": "Checks that the row is within bounds of the view.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "onBrowserEvent2(com.google.gwt.user.client.Event event)",
    "name": "onBrowserEvent2",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.user.client.Event",
          "name": "Event",
          "isArray": false
        },
        "name": "event"
      }
    ],
    "equivalence": {
      "comment": "Called after #onBrowserEvent(Event) completes.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setFocus(boolean focused)",
    "name": "setFocus",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "focused"
      }
    ],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "showOrHide(com.google.gwt.dom.client.Element element, boolean show)",
    "name": "showOrHide",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.gwt.dom.client.Element",
          "name": "Element",
          "isArray": false
        },
        "name": "element"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "show"
      }
    ],
    "equivalence": {
      "comment": "Show or hide an element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "checkRowBounds(int row)",
    "name": "checkRowBounds",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "row"
      }
    ],
    "equivalence": {
      "comment": "Check that the row is within the correct bounds.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getPageStart()",
    "name": "getPageStart",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Return the range start.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getKeyProvider()",
    "name": "getKeyProvider",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.gwt.view.client.ProvidesKey<T>",
      "name": "com.google.gwt.view.client.ProvidesKey<T>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getTabIndex()",
    "name": "getTabIndex",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setPageSize(int pageSize)",
    "name": "setPageSize",
    "containingClass": {
      "qualifiedName": "com.google.gwt.user.cellview.client.AbstractHasData",
      "name": "AbstractHasData",
      "isArray": false
    },
    "targetClass": "com.google.gwt.user.cellview.client.AbstractHasData",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "pageSize"
      }
    ],
    "equivalence": {
      "comment": "Set the number of rows per page and refresh the view.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]